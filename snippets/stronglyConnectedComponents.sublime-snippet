<snippet>
	<content><![CDATA[
class SCC {
  public:
    SCC(vector<vector<int>>& adj): d_adj(adj) {
        int n = adj.size() - 1;
        r_adj.resize(n + 1);
        for (int i = 1; i <= n; i++) {
            for (auto it : adj[i]) {
                r_adj[it].push_back(i);
            }
        }

        d_scc_numbers.resize(n + 1, 0);
        vector<bool> vis(n + 1, false);
        vector<int> order_of_dfs;
        for (int i = 1; i <= n; i++) {
            if (!vis[i]) {
                calculateOrderOfDFS(i, vis, order_of_dfs);
            }
        }
        for (int i = 1; i <= n; i++) {
            vis[i] = false;
        }
        while (!order_of_dfs.empty()) {
            int curr_vertex = order_of_dfs.back();
            if (!vis[curr_vertex]) {
                scc_number++;
                dfsForSCC(curr_vertex, vis);
            }
            order_of_dfs.pop_back();
        }
    }
    vector<int> getSCC() const {
        return d_scc_numbers;
    }
    int getSCCCount() const {
        return scc_number;
    }
  private:
    void calculateOrderOfDFS(int curr, vector<bool> &vis, vector<int>& order_of_dfs) {
        vis[curr] = true;
        for (auto it : d_adj[curr]) {
            if (!vis[it]) {
                calculateOrderOfDFS(it, vis, order_of_dfs);
            }
        }
        order_of_dfs.push_back(curr);
    }
    void dfsForSCC(int curr, vector<bool>& vis) {
        vis[curr] = true;
        d_scc_numbers[curr] = scc_number;
        for (auto it : r_adj[curr]) {
            if (!vis[it]) {
                dfsForSCC(it, vis);
            }
        }
    }
    vector<vector<int>> d_adj;
    vector<vector<int>> r_adj;
    vector <int> d_scc_numbers;
    int scc_number = 0;
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
<tabTrigger>sublime_isSCC</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
