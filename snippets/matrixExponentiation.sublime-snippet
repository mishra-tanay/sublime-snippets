<snippet>
	<content><![CDATA[
ll matexpon(ll n, ll mod1)
{   const int N = 2;
    ll mat[N][N]= { {1,1},
                    {1,0}
                   };
    ll result[N][N]= {{1,0},
                     {0,1}};
    ll temp[N][N]= {{0,0},{0,0}};
    int i,j,k;
    while(n)
    {
        if(n&1)
        {
            for(int i=0;i<N ;i++){
                for(int j=0;j<N;j++){
                    temp[i][j]=0;
                }
            }
            for(i=0; i<N; i++){
                for(j=0; j<N; j++){
                     for(k=0; k<N; k++)
                        temp[i][j]=(temp[i][j]%mod1 + ((result[i][k]%mod1)*(mat[k][j]%mod1))%mod1)%mod1;
                }
            }
            for(i=0; i<N; i++){
                for(j=0; j<N; j++){
                 result[i][j]=temp[i][j]%mod1;
             }
            }
        }
        for(int i=0;i<N ;i++){
                for(int j=0;j<N;j++){
                    temp[i][j]=0;
                }
         }
        for(i=0; i<N; i++) {
            for(j=0; j<N; j++) {
                for(k=0; k<N; k++){
                    temp[i][j]=(temp[i][j]+((mat[i][k]%mod1)*(mat[k][j]%mod1))%mod1)%mod1;
                }
            }
        }
        for(i=0; i<N; i++) {
            for(j=0; j<N; j++) {
                mat[i][j]=temp[i][j]%mod1;
            }
        }
        n/=2;
    }
    return (result[0][1])%mod1;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>sublime_matrixexponentiation</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
