<snippet>
	<content><![CDATA[
const int MAXBIT=20;
struct node
{
    node *child[2];
};
node* getnode(){
    node* temp=new node;
    temp->child[0]=NULL;
    temp->child[1]=NULL;
    return temp;
}
void printTrie(node* root, int val, int bit){
    if(bit<0){
        cout<<val;
    }
    if(root->child[1]){
        
        printTrie(root->child[1],val+pow(2,bit),bit-1);
    }
    else if(root->child[0]){
        printTrie(root->child[0],val,bit-1);
    }

}
void insert(node* root,int x){
    node* curr = root;
    for(int i=MAXBIT; i>=0; i--){
        int b = (x>>i)&1;
        if(b==0){
            if(!curr->child[0]){
                curr->child[0] = new node();
            }
            curr = curr->child[0];
        }else{
            if(!curr->child[1]){
                curr->child[1] = new node();
            }
            curr = curr->child[1];
        }
    }
}
int findMax(node* root,int val){
    int maxVal = 0;
    node* curr = root;
    for(int i=MAXBIT; i>=0; i--){
        int b = (val>>i)&1;
        if(b==0){
            if(curr->child[1]){
                maxVal += (1<<i);
                curr=curr->child[1];
            }else{
                curr=curr->child[0];
            }
        }else{
            if(curr->child[0]){
                maxVal += (1<<i);
                curr=curr->child[0];
            }else{
                curr=curr->child[1];
            }
        }
    }
    return maxVal;
}
int findMin(node* root,int val){
    int minVal = 0;
    node* curr = root;
    for(int i=MAXBIT; i>=0; i--){
        int b = (val>>i)&1;
        if(b==0){
            if(curr->child[0]){
                curr=curr->child[0];
            }else{
                minVal += (1<<i);
                curr=curr->child[1];
            }
        }else{
            if(curr->child[1]){
               
                curr=curr->child[1];
            }else{
                minVal += (1<<i);
                curr=curr->child[0];
            }
        }
    }
    return minVal;
}

// node *trie = getnode();
// insert(trie,arr[i],MAXBIT);

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
 <tabTrigger>sublime_bits</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
