<snippet>
	<content><![CDATA[
class SegmentTree {
  public:
	SegmentTree(const vector<ll>& arr) : d_arr(arr) {
		n = arr.size() - 1;
		d_segment.resize(4 * n, 0);
		buildSegmentTree(1, 1, n);
	}
	void update(int pos, int val) {
		updateUtil(1, 1, n, pos, val);
	}
	ll query(int left, int right) {
		return queryUtil(1, 1, n, left, right);
	}
	ll query(int pos) {
		return query(pos, pos);
	}
  private:
	void buildSegmentTree(int index, int low, int high) {
		if (low == high) {
			d_segment[index] = 0;
			return;
		}
		int mid = (low + high) / 2;
		buildSegmentTree(2 * index, low , mid);
		buildSegmentTree(2 * index + 1, mid + 1, high);
		d_segment[index] = merge(d_segment[2 * index], d_segment[2 * index + 1]);
	}
	ll queryUtil(int index, int low, int high, int left, int right) {
		if (low > right || high < left) {
			return 0; // Appropriate return value.
		}
		if (left <= low && right >= high) {
			return d_segment[index];
		}
		int mid = (low + high) / 2;
		auto left_ans = queryUtil(2 * index, low, mid, left, right);
		auto right_ans = queryUtil(2 * index + 1 , mid + 1, high, left, right);
		return merge(left_ans, right_ans);
	}

	void updateUtil(int index, int low, int high, int pos, int val) {
		if (low == high) {
			d_segment[index] += val;
			return;
		}
		int mid = (low + high) / 2;
		if ( pos <= mid) {
			updateUtil(2 * index, low , mid, pos, val);
		} else {
			updateUtil(2 * index + 1, mid + 1, high, pos, val);
		}
		d_segment[index] = merge(d_segment[2 * index], d_segment[2 * index + 1]);
	}
	ll merge(int left, int right) {
		return left + right;
	}
	vector<ll> d_arr;
	vector<ll> d_segment;
	int n;
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sublime_segment</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
